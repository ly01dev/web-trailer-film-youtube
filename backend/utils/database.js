/**
 * Database Connection Utility
 * K·∫øt n·ªëi ƒë·∫øn MongoDB database v·ªõi error handling v√† logging
 */

const mongoose = require('mongoose');

/**
 * H√†m k·∫øt n·ªëi ƒë·∫øn MongoDB database
 * S·ª≠ d·ª•ng MONGO_URI t·ª´ file .env ho·∫∑c fallback v·ªÅ local MongoDB
 * @returns {Promise<void>} - Promise khi k·∫øt n·ªëi th√†nh c√¥ng
 */
const connectDB = async () => {
  try {
    // L·∫•y URI k·∫øt n·ªëi t·ª´ bi·∫øn m√¥i tr∆∞·ªùng, ∆∞u ti√™n MONGO_URI tr∆∞·ªõc
    const mongoURI = process.env.MONGO_URI || 
                     process.env.MONGODB_URI || 
                     'mongodb://localhost:27017/movietube';
    
    // K·∫øt n·ªëi ƒë·∫øn MongoDB v·ªõi c√°c options t·ªëi ∆∞u
    const conn = await mongoose.connect(mongoURI, {
      maxPoolSize: 10,            // S·ªë l∆∞·ª£ng connection t·ªëi ƒëa trong pool
      serverSelectionTimeoutMS: 5000, // Timeout khi ch·ªçn server
      socketTimeoutMS: 45000,     // Timeout cho socket operations
      bufferCommands: false       // Disable mongoose buffering
    });

    // Log th√†nh c√¥ng khi k·∫øt n·ªëi ƒë∆∞·ª£c
    console.log(`üì¶ MongoDB ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng: ${conn.connection.host}`);
    console.log(`üîó Database: ${conn.connection.name}`);
    console.log(`‚ö° Mongoose version: ${mongoose.version}`);
  } catch (error) {
    // Log l·ªói chi ti·∫øt khi kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c
    console.error(`‚ùå L·ªói k·∫øt n·ªëi database: ${error.message}`);
    console.log('üí° H√£y ƒë·∫£m b·∫£o:');
    console.log('   1. MongoDB ƒëang ch·∫°y');
    console.log('   2. MONGO_URI ƒë∆∞·ª£c c·∫•u h√¨nh trong file .env');
    console.log('   3. Network connection ·ªïn ƒë·ªãnh');
    
    // Tho√°t process n·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c database
    process.exit(1);
  }
};

/**
 * H√†m ƒë√≥ng k·∫øt n·ªëi database
 * D√πng khi c·∫ßn graceful shutdown
 * @returns {Promise<void>} - Promise khi ƒë√≥ng th√†nh c√¥ng
 */
const disconnectDB = async () => {
  try {
    await mongoose.connection.close();
    console.log('üì¶ MongoDB connection ƒë√£ ƒë√≥ng');
  } catch (error) {
    console.error('‚ùå L·ªói khi ƒë√≥ng MongoDB connection:', error.message);
  }
};

/**
 * Event listeners cho database connection
 */
mongoose.connection.on('error', (err) => {
  console.error('‚ùå MongoDB connection error:', err);
});

mongoose.connection.on('disconnected', () => {
  console.log('‚ö†Ô∏è  MongoDB connection b·ªã ng·∫Øt');
});

mongoose.connection.on('reconnected', () => {
  console.log('‚úÖ MongoDB connection ƒë√£ k·∫øt n·ªëi l·∫°i');
});

// Graceful shutdown khi app t·∫Øt
process.on('SIGINT', async () => {
  await disconnectDB();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  await disconnectDB();
  process.exit(0);
});

module.exports = { connectDB, disconnectDB }; 